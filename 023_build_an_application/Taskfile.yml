version: '3'

vars:
  OUTPUT_DIR: dist

  MAIN_PACKAGE_PATH_WEBSERVER: ./cmd/webserver
  MAIN_PACKAGE_PATH_CLI: ./cmd/cli
  BIN_LIST: [http-server, cli]

  OS_LIST: [linux, darwin, windows]
  ARCH_LIST: [amd64, arm64]

  EXT_WIN: .exe

tasks:
  default:
    desc: Show available tasks
    silent: true
    cmds:
      - task --list-all --sort=alphanumeric

  clean:
    desc: Clean output directory
    silent: true
    cmds:
      - 'echo "[*] Cleaning compiled binaries in: {{.OUTPUT_DIR}}"'
      - rm -rf {{.OUTPUT_DIR}}

  build:all:
    desc: Build and compress both binaries for host platform
    aliases:
      - build
    deps: [build:webserver, build:cli]

  build:webserver:
    desc: Build and compress webserver binary for host platform
    cmds:
      - task: _build
        vars:
          NAME: '{{index .BIN_LIST 0}}'
          PKG: '{{.MAIN_PACKAGE_PATH_WEBSERVER}}'

  build:cli:
    desc: Build and compress CLI binary for host platform
    cmds:
      - task: _build
        vars:
          NAME: '{{index .BIN_LIST 1}}'
          PKG: '{{.MAIN_PACKAGE_PATH_CLI}}'

  build:matrix:
    desc: Cross-compile and compress all OS/ARCH binaries
    aliases:
      - release
    vars:
      BINARIES: '{{index .BIN_LIST 0}} {{index .BIN_LIST 1}}'
    cmds:
      - for:
          matrix:
            OS:
              ref: .OS_LIST
            ARCH:
              ref: .ARCH_LIST
        cmd: |
          for bin in {{.BINARIES}}; do
            if [ "$bin" = "http-server" ]; then
              pkg={{.MAIN_PACKAGE_PATH_WEBSERVER}}
            else
              pkg={{.MAIN_PACKAGE_PATH_CLI}}
            fi

            output="{{.OUTPUT_DIR}}/${bin}_{{.OS}}_{{.ARCH}}${.EXT}"

            echo "[+] - [{{.OS}}/{{.ARCH}}] - Building $output ($pkg/main.go)..."
            mkdir -p "$(dirname "$output")"
            GOOS={{.OS}} GOARCH={{.ARCH}} go build -ldflags='-s' -o="$output" "$pkg/main.go"

            if [ "{{.OS}}" = "darwin" ]; then
              upx --best --lzma --force-macos "$output" || echo "[*] UPX failed for {{.OS}}/{{.ARCH}}, skipping..."
            else
              upx --best --lzma "$output" || echo "[*] UPX failed for {{.OS}}/{{.ARCH}}, skipping..."
            fi
          done
        silent: true
        vars:
          EXT:
            sh: '[ "$(go env GOOS)" = "windows" ] && echo "{{.EXT_WIN}}" || echo ""'

  _build:
    internal: true
    silent: true
    vars:
      EXT:
        sh: '[ "$(go env GOOS)" = "windows" ] && echo "{{.EXT_WIN}}" || echo ""'
    cmds:
      - mkdir -p {{.OUTPUT_DIR}}
      - echo "[*] Building {{.NAME}} for $(go env GOOS)/$(go env GOARCH)"
      - "go build -ldflags='-s' -o={{.OUTPUT_DIR}}/{{.NAME}}{{.EXT}} {{.PKG}}/{{.MAIN_GO_FILE}}"
      - |-
        FILE="{{.OUTPUT_DIR}}/{{.NAME}}{{if eq OS "windows"}}.exe{{end}}"

        if [[ "$(go env GOOS)" == "darwin" ]]; then
          upx --best --lzma --force-macos "$FILE" || echo "[*] UPX failed, skipping..."
        else
          upx --best --lzma "$FILE" || echo "[*] UPX failed, skipping..."
        fi

  compress:
    desc: Compress a binary (FILE) using UPX
    vars:
      FILE: '{{.FILE| default ""}}'
    silent: true
    cmds:
      - echo "[*] Compressing {{.FILE}} using UPX"
      - |
        if [[ "$(go env GOOS)" == "darwin" ]]; then
          upx --best --lzma --force-macos "{{.FILE}}" || echo "[*] UPX failed, skipping..."
        else
          upx --best --lzma "{{.FILE}}" || echo "[*] UPX failed, skipping..."
        fi
